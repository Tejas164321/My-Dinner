rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // MESSES: Publicly readable, only admins can write.
    match /messes/{messId} {
      allow read: if true;
      allow write: if request.auth.uid == messId;
    }

    // USERS:
    // - Users can read their own document.
    // - Admins can read documents of students in their mess.
    // - Users can create their own document on signup.
    // - Users can update their own document.
    // - Admins can update students in their mess.
    // - Admins can delete students from their mess (moves them to suspended).
    match /users/{userId} {
      allow read: if request.auth.uid == userId
                  || (
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                    && get(/databases/$(database)/documents/users/$(userId)).data.messId == request.auth.uid
                  );
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId
                     || (
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                       && get(/databases/$(database)/documents/users/$(userId)).data.messId == request.auth.uid
                     );
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // SUSPENDED_STUDENTS: Historical records.
    // Only the admin of the mess where the student WAS can read or delete.
    // Only authenticated users (admins) can create them.
    match /suspended_students/{docId} {
        allow read, delete: if request.auth.uid == resource.data.messId;
        allow create: if request.auth != null;
    }

    // MENUS: Readable by students of the mess, writable only by the admin.
    match /menus/{menuId} {
      allow read: if request.auth.uid == resource.data.messId
                   || (
                     exists(/databases/$(database)/documents/users/$(request.auth.uid))
                     && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.messId == resource.data.messId
                   );
      allow write: if request.auth.uid == resource.data.messId;
    }
    
    // ANNOUNCEMENTS: Readable by students of the mess, writable only by the admin.
    match /announcements/{announcementId} {
       allow read: if request.auth.uid == resource.data.messId
                   || (
                     exists(/databases/$(database)/documents/users/$(request.auth.uid))
                     && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.messId == resource.data.messId
                   );
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if request.auth.uid == resource.data.messId;
    }

    // LEAVES: Students can manage their own leaves. Admins can read all leaves for their mess.
    match /leaves/{leaveId} {
      allow read, create, delete: if request.auth.uid == resource.data.studentId;
      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // HOLIDAYS: Readable by anyone (e.g., for showing on a public calendar), writable only by admins.
    match /holidays/{holidayId} {
      allow read: if true;
      allow create, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // PLAN CHANGE REQUESTS: Students can create them for their own mess. Admins can read/delete for their mess.
    match /planChangeRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.studentUid;
      allow read, delete: if request.auth.uid == resource.data.messId;
    }
  }
}
