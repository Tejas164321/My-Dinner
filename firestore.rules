rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isSelf(userId) {
      return request.auth.uid == userId;
    }

    // Prevent a user from changing their own protected fields during an update
    function userUnchangedProtectedFields() {
      let futureData = request.resource.data;
      let pastData = resource.data;
      return futureData.role == pastData.role &&
             futureData.email == pastData.email &&
             futureData.studentId == pastData.studentId &&
             futureData.messId == pastData.messId &&
             futureData.messPlan == pastData.messPlan &&
             futureData.joinDate == pastData.joinDate &&
             futureData.secretCode == pastData.secretCode;
    }

    // --- Collections ---

    match /users/{userId} {
      allow read: if isAdmin() || isSelf(userId) || get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
      allow create: if isSelf(userId); // For new user signup
      allow delete: if isAdmin();

      // Granular update rules
      allow update: if
        // 1. Admin can update any user record.
        isAdmin() ||
        // 2. A student is updating their own non-critical info (e.g., name, contact, avatar).
        (isSelf(userId) && userUnchangedProtectedFields()) ||
        // 3. A student is joining a mess (specific state transition)
        (isSelf(userId) && resource.data.status == 'unaffiliated' && request.resource.data.status == 'pending_approval') ||
        // 4. A student is cancelling a join request (specific state transition)
        (isSelf(userId) && resource.data.status == 'pending_approval' && request.resource.data.status == 'unaffiliated');
    }

    match /messes/{messId} {
      allow read: if request.auth != null;
      allow create: if isSelf(messId); // Admin creates their own mess doc on signup
    }

    match /holidays/{holidayId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /leaves/{leaveId} {
      allow read: if isSelf(resource.data.studentId) || isAdmin();
      allow create: if isSelf(request.resource.data.studentId);
      allow delete: if isSelf(resource.data.studentId);
    }

    match /planChangeRequests/{requestId} {
      allow create: if isSelf(request.resource.data.studentUid);
      allow read, delete: if isAdmin();
    }

    match /menus/{menuId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
     match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
}
