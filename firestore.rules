rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // ANY authenticated user can get ANY single user document.
      // This is required for a student to look up an admin's document to verify the secret code.
      // It is secure because it does NOT allow listing all users. A user must know the exact UID to get the document.
      allow get: if request.auth != null;

      // ANY authenticated user can list users, BUT only if they are an admin.
      // This allows the admin dashboard to function.
      allow list: if request.auth != null && isAdmin(request.auth.uid);
      
      // A user can create their own document upon signup.
      allow create: if request.auth.uid == userId;

      // Update rules are more complex:
      allow update: if 
        // Rule 1: A user can always update their own document.
        (request.auth.uid == userId) ||
        // Rule 2: An admin can update a student's document if that student belongs to their mess.
        (isAdmin(request.auth.uid) && resource.data.messId == request.auth.uid);
    }
    
    match /messes/{messId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == messId && isAdmin(request.auth.uid);
    }
    
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth.uid == request.resource.data.messId && isAdmin(request.auth.uid);
    }

    match /holidays/{holidayId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth.uid == request.resource.data.messId && isAdmin(request.auth.uid);
    }

    match /leaves/{leaveId} {
       allow read, create, delete: if request.auth != null && (
          // A student can manage their own leaves
          request.auth.uid == resource.data.studentId || 
          request.auth.uid == request.resource.data.studentId ||
          // An admin can read any leave
          isAdmin(request.auth.uid)
       );
    }

    match /menus/{menuId} {
       allow read: if request.auth != null;
       allow create, update: if request.auth.uid == request.resource.data.messId && isAdmin(request.auth.uid);
    }

    match /planChangeRequests/{requestId} {
      allow read, create, delete: if request.auth != null;
    }
  }
}